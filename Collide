import React, { useState, useRef, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  FlatList, 
  TextInput, 
  TouchableOpacity, 
  KeyboardAvoidingView, 
  Platform,
  Image,
  Alert
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { router, useLocalSearchParams } from 'expo-router';
import { SafeAreaView } from 'react-native-safe-area-context';
import { colors, commonStyles } from '../../styles/commonStyles';
import ChatBubble from '../../components/ChatBubble';
import { mockChats, mockMessages, currentUser } from '../../data/mockData';
import { Message, Chat } from '../../types';

export default function ChatScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const [messages, setMessages] = useState<Message[]>(mockMessages);
  const [inputText, setInputText] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const flatListRef = useRef<FlatList<Message>>(null);

  const chat = mockChats.find((c) => c.id === id);

  // Always define hooks before returns
  useEffect(() => {
    // Scroll to bottom when messages change
    setTimeout(() => {
      flatListRef.current?.scrollToOffset({
        offset: Number.MAX_SAFE_INTEGER,
        animated: true,
      });
    }, 100);
  }, [messages]);

  if (!chat) {
    return (
      <SafeAreaView style={commonStyles.container}>
        <Text style={commonStyles.text}>Chat not found</Text>
      </SafeAreaView>
    );
  }

  const otherParticipant = chat.participants.find(
    (p) => p.id !== currentUser.id
  );

  const handleSendMessage = () => {
    if (inputText.trim()) {
      const newMessage: Message = {
        id: `msg-${Date.now()}`,
        text: inputText.trim(),
        user: currentUser,
        createdAt: new Date(),
        type: 'text',
      };

      setMessages((prev) => [...prev, newMessage]);
      setInputText('');
    }
  };

  const handleVoiceRecord = () => {
    if (isRecording) {
      setIsRecording(false);
      console.log('Voice recording stopped');
      // TODO: Implement voice recording functionality
    } else {
      setIsRecording(true);
      console.log('Voice recording started');
      // TODO: Implement voice recording functionality
    }
  };

  const handleAttachment = () => {
    Alert.alert('Send Media', 'Choose an option', [
      { text: 'Camera', onPress: () => console.log('Open camera') },
      { text: 'Gallery', onPress: () => console.log('Open gallery') },
      { text: 'Document', onPress: () => console.log('Open documents') },
      { text: 'Cancel', style: 'cancel' },
    ]);
  };

  const handleReaction = (messageId: string, emoji: string) => {
    console.log('Adding reaction:', emoji, 'to message:', messageId);
    // TODO: Implement reaction functionality
  };

  const handleMessageLongPress = (message: Message) => {
    Alert.alert('Message Options', '', [
      { text: 'React', onPress: () => console.log('Show reaction picker') },
      { text: 'Reply', onPress: () => console.log('Reply to message') },
      { text: 'Copy', onPress: () => console.log('Copy message') },
      {
        text: 'Delete',
        onPress: () => console.log('Delete message'),
        style: 'destructive',
      },
      { text: 'Cancel', style: 'cancel' },
    ]);
  };

  const renderMessage = ({ item }: { item: Message }) => (
    <ChatBubble
      message={item}
      isOwn={item.user.id === currentUser.id}
      onReaction={handleReaction}
      onLongPress={handleMessageLongPress}
    />
  );

  const renderHeader = () => (
    <View style={styles.header}>
      <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
        <Ionicons name="arrow-back" size={24} color={colors.text} />
      </TouchableOpacity>

      <View style={styles.chatInfo}>
        {otherParticipant?.avatar && (
          <Image
            source={{ uri: otherParticipant.avatar }}
            style={styles.headerAvatar}
          />
        )}
        <View style={styles.headerText}>
          <Text style={styles.headerName}>
            {chat.type === 'group' ? chat.name : otherParticipant?.name}
          </Text>
          {otherParticipant?.status === 'online' && (
            <Text style={styles.headerStatus}>Online</Text>
          )}
          {otherParticipant?.currentMusic && (
            <Text style={styles.headerActivity}>
              ðŸŽµ {otherParticipant.currentMusic.title}
            </Text>
          )}
        </View>
      </View>

      <View style={styles.headerActions}>
        <TouchableOpacity style={styles.headerButton}>
          <Ionicons name="videocam" size={24} color={colors.text} />
        </TouchableOpacity>
        <TouchableOpacity style={styles.headerButton}>
          <Ionicons name="call" size={24} color={colors.text} />
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <SafeAreaView style={commonStyles.container}>
      {renderHeader()}
      <FlatList
        ref={flatListRef}
        data={messages}
        renderItem={renderMessage}
        keyExtractor={(item) => item.id}
        contentContainerStyle={styles.messagesContainer}
      />

      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
        keyboardVerticalOffset={90}
      >
        <View style={styles.inputContainer}>
          <TouchableOpacity onPress={handleAttachment} style={styles.iconButton}>
            <Ionicons name="add" size={24} color={colors.text} />
          </TouchableOpacity>

          <TextInput
            style={styles.input}
            value={inputText}
            onChangeText={setInputText}
            placeholder="Type a message"
            placeholderTextColor={colors.placeholder}
          />

          <TouchableOpacity
            onPress={handleVoiceRecord}
            style={styles.iconButton}
          >
            <Ionicons
              name={isRecording ? 'mic' : 'mic-outline'}
              size={24}
              color={colors.text}
            />
          </TouchableOpacity>

          <TouchableOpacity onPress={handleSendMessage} style={styles.iconButton}>
            <Ionicons name="send" size={24} color={colors.text} />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: colors.border,
  },
  backButton: {
    marginRight: 12,
  },
  chatInfo: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 8,
  },
  headerText: {
    flexDirection: 'column',
  },
  headerName: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
  },
  headerStatus: {
    fontSize: 12,
    color: colors.success,
  },
  headerActivity: {
    fontSize: 12,
    color: colors.secondaryText,
  },
  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerButton: {
    marginLeft: 12,
  },
  messagesContainer: {
    padding: 12,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8,
    borderTopWidth: StyleSheet.hairlineWidth,
    borderTopColor: colors.border,
  },
  input: {
    flex: 1,
    marginHorizontal: 8,
    padding: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: colors.border,
    color: colors.text,
  },
  iconButton: {
    padding: 6,
  },
});
